from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.enums import ParseMode
import os
import threading
from flask import Flask

# --- Configuration (‡§Ø‡§π ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∏‡•Ä‡§ß‡•á ‡§Ü‡§™‡§ï‡•á ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à) ---
API_ID = 16267139
API_HASH = "e0bdab938a5b5d771411f45ee12a9f2b"
BOT_TOKEN = "8347361707:AAHGPqpYoSqfKeex_QSvb6Wgg-BjeXD7Q10"
BOT_USERNAME = "adultvideofree_bot"
ADMIN_ID = 7843231115
CHANNEL_ID = -1002714387561

# --- Pyrogram Client Initialization ---
app = Client(
    "DeepLinkBot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# --- Message 1: Regular /start Command ---
regular_start_text = (
    "**‡§®‡§Æ‡§∏‡•ç‡§§‡•á!** üëã\n\n"
    "‡§Ø‡§π ‡§è‡§ï **‡§∏‡•ç‡§™‡•á‡§∂‡§≤ ‡§´‡§º‡§æ‡§á‡§≤ ‡§≤‡§ø‡§Ç‡§ï ‡§¨‡•â‡§ü** ‡§π‡•à‡•§\n"
    "‡§´‡§º‡§æ‡§á‡§≤ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§ï‡•É‡§™‡§Ø‡§æ **‡§∏‡•ç‡§™‡•á‡§∂‡§≤ ‡§≤‡§ø‡§Ç‡§ï** ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•ã ‡§π‡§Æ‡§æ‡§∞‡•á ‡§ö‡•à‡§®‡§≤ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ‡•§\n\n"
    "‡§≤‡§ø‡§Ç‡§ï ‡§®‡•Ä‡§ö‡•á ‡§¨‡§ü‡§® ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ **‡§¨‡•á‡§π‡§§‡§∞‡•Ä‡§® ‡§´‡§º‡•â‡§®‡•ç‡§ü** ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§Æ‡§®‡•á Markdown ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à‡•§"
)

# Channel Link Button
channel_link_button = InlineKeyboardMarkup([
    [InlineKeyboardButton("‡§π‡§Æ‡§æ‡§∞‡§æ ‡§ö‡•à‡§®‡§≤ ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç (‡§∏‡•ç‡§™‡•á‡§∂‡§≤ ‡§≤‡§ø‡§Ç‡§ï)", url="https://t.me/+fnk2mum5ClNhMWM9")]
])

@app.on_message(filters.command("start"))
async def start_command_handler(client, message):
    if len(message.command) > 1:
        # Deep Link Start: /start payload
        payload = message.command[1]
        try:
            file_message_id = int(payload)
            
            # File ‡§ï‡•ã ‡§ö‡•à‡§®‡§≤ ‡§∏‡•á ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã Forward ‡§ï‡§∞‡•á‡§Ç
            await client.copy_message(
                chat_id=message.chat.id,
                from_chat_id=CHANNEL_ID,
                message_id=file_message_id
            )
            
            # Message 2: Success Message
            deep_start_success_text = "**‚úÖ Done!**\n\n‡§Ü‡§™‡§ï‡•Ä ‡§´‡§º‡§æ‡§á‡§≤ ‡§≠‡•á‡§ú ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§"
            await message.reply_text(
                deep_start_success_text,
                parse_mode=ParseMode.MARKDOWN
            )

        except ValueError:
            await message.reply_text("‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Ø‡§π ‡§è‡§ï ‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•ã‡§° ‡§π‡•à‡•§")
        except Exception as e:
            await message.reply_text(f"‡§´‡§º‡§æ‡§á‡§≤ ‡§≠‡•á‡§ú‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§ï‡•ã‡§à ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§ ‡§∂‡§æ‡§Ø‡§¶ ‡§Ø‡§π ‡§≤‡§ø‡§Ç‡§ï ‡§Ö‡§¨ ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§")

    else:
        # Regular Start: /start
        await message.reply_text(
            regular_start_text,
            reply_markup=channel_link_button,
            parse_mode=ParseMode.MARKDOWN
        )


# --- File Upload Handling (Only for Admin) ---
@app.on_message(filters.media & filters.user(ADMIN_ID))
async def file_handler(client, message):
    try:
        # 1. File ‡§ï‡•ã Private Channel ‡§Æ‡•á‡§Ç Forward ‡§ï‡§∞‡•á‡§Ç
        forwarded_msg = await client.forward_messages(
            chat_id=CHANNEL_ID,
            from_chat_id=message.chat.id,
            message_ids=message.id
        )
        
        # 2. Forwarded Message ‡§ï‡•Ä ID ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç (‡§Ø‡§π ID ‡§™‡§∞‡§Æ‡§æ‡§®‡•á‡§Ç‡§ü ‡§π‡•à)
        permanent_message_id = forwarded_msg.id
        
        # 3. Deep Link ‡§¨‡§®‡§æ‡§è‡§Å
        deep_link = f"https://t.me/{BOT_USERNAME}?start={permanent_message_id}"
        
        # 4. Link ‡§ï‡•ã Admin ‡§ï‡•ã ‡§≠‡•á‡§ú‡•á‡§Ç
        response_text = (
            "**‚úÖ ‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§î‡§∞ ‡§≤‡§ø‡§Ç‡§ï ‡§π‡•ã ‡§ó‡§à!**\n\n"
            f"**Deep Link:** `{deep_link}`\n\n"
            "‡§Ø‡§π ‡§≤‡§ø‡§Ç‡§ï ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∞‡•Ä‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§≠‡•Ä ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ‡•§"
        )
        
        await message.reply_text(
            response_text,
            parse_mode=ParseMode.MARKDOWN
        )

    except Exception as e:
        await message.reply_text(f"‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§ö‡•à‡§®‡§≤ ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à: {e}")


# --- Replit Hosting ‡§ï‡•á ‡§≤‡§ø‡§è Flask Server ---
# ‡§Ø‡§π ‡§õ‡•ã‡§ü‡§æ ‡§∏‡§æ Flask ‡§ï‡•ã‡§° Replit ‡§ï‡•ã ‡§¨‡§§‡§æ‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§™‡§ï‡§æ ‡§¨‡•â‡§ü ‡§ö‡§æ‡§≤‡•Ç ‡§π‡•à, 
# ‡§ú‡§ø‡§∏‡§∏‡•á ‡§µ‡§π ‡§â‡§∏‡•á '‡§π‡§Æ‡•á‡§∂‡§æ ‡§ö‡§æ‡§≤‡•Ç' (always on) ‡§∞‡§ñ‡§§‡§æ ‡§π‡•à‡•§
app_server = Flask(__name__)

@app_server.route('/')
def home():
    return "Telegram Bot is Running!"

def run_flask():
    # Flask ‡§ï‡•ã 0.0.0.0 ‡§™‡§∞ ‡§ö‡§≤‡§æ‡§è‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§µ‡§π Replit ‡§ï‡•á ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§™‡§∞ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§π‡•ã ‡§∏‡§ï‡•á
    app_server.run(host='0.0.0.0', port=8080)

# --- Main Execution ---
def main():
    # Flask Server ‡§ï‡•ã ‡§è‡§ï ‡§Ö‡§≤‡§ó Thread ‡§Æ‡•á‡§Ç ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
    threading.Thread(target=run_flask).start()
    
    # Bot Client ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§∞‡•ã‡§ï‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç (Idle)
    print("Bot Client Running...")
    app.run()

if __name__ == '__main__':
    main()
            
